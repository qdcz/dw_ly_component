{
	"compilerOptions": {
		/* Visit https://aka.ms/tsconfig.json to read more about this file */

		/* Projects */
		// "incremental": true,                              /* 是否启用增量编译*/
		// "composite": true,                                /* 是否编译构建引用项目  */
		// "tsBuildInfoFile": "./",                          /* 指定文件用来存储增量编译信息 */
		// "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
		// "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
		// "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

		/* Language and Environment */
		"target": "es6" /* target用于指定编译之后的版本目标: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */,
		"lib": ["ESNext", "DOM"] /* ib用于指定要包含在编译中的库文件,编译时用的库 */,
		"jsx": "preserve" /* jsx不转,指定jsx代码用于的开发环境: 'preserve', 'react-native', or 'react'.  */,
		"experimentalDecorators": true /* 装饰器语法 */,
		// "emitDecoratorMetadata": true,                    /* 用于指定是否为装饰器提供元数据支持，关于元数据，也是ES6的新标准，可以通过Reflect提供的静态方法获取元数据，如果需要使用Reflect的一些方法，需要引入ES2015.Reflect这个库. */
		// "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
		// "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
		// "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
		// "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
		//"noLib": true /*不处理类库 */,
		// "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */

		/* Modules */
		"module": "ESNext" /* 用来指定要打包的模块标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'.*/,
		// "rootDir": "./",                                  /* Specify the root folder within your source files. */
		"moduleResolution": "node" /* 按照node模块来解析，用于选择模块解析策略，有'node'和'classic'两种类型 */,
		// "baseUrl": "./",                                  /* baseUrl用于设置解析非相对模块名称的基本目录，相对模块不会受baseUrl的影响 */
		// "paths": {},                                      /* 用于设置模块名称到基于baseUrl的路径映射 */
		// "rootDirs": [],                                   /* rootDirs可以指定一个路径列表，在构建时编译器会将这个路径列表中的路径的内容都放到一个文件夹中 */
		// "typeRoots": [],                                  /* typeRoots用来指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载 */
		// "types": [],                                      /* types用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来 */
		// "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
		"resolveJsonModule": true /* 解析JSON模块 */,
		// "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */

		/* JavaScript Support */
		// "allowJs": true /* allowJs设置的值为true或false，用来指定是否允许编译js文件，默认是false，即不编译js文件 */,
		// "checkJs": true,                                  /* checkJs的值为true或false，用来指定是否检查和报告js文件中的错误，默认是false  */
		// "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */

		/* Emit */

		"declaration": true /* declaration的值为true或false，用来指定是否在编译的时候生成相应的".d.ts"声明文件。如果设为true，编译每个ts文件之后会生成一个js文件和一个声明文件。但是declaration和allowJs不能同时设为true */,
		// "declarationDir": "",

		// "declarationMap": true,                          /* 值为true或false，指定是否为声明文件.d.ts生成map文件 */
		// "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
		"sourceMap": true /* outFile用于指定将输出文件合并为一个文件，它的值为一个文件路径名。比如设置为"./dist/main.js"，则输出的文件为一个main.js文件。但是要注意，只有设置module的值为amd和system模块时才支持这个配置 */,

		// "outFile": "./",                                  /* 用来指定编译文件的根目录，编译器会在根目录查找入口文件，如果编译器发现以rootDir的值作为根目录查找入口文件并不会把所有文件加载进去的话会报错，但是不会停止编译 */
		// "outDir": "./",                                   /* 用来指定编译文件的根目录，编译器会在根目录查找入口文件，如果编译器发现以rootDir的值作为根目录查找入口文件并不会把所有文件加载进去的话会报错，但是不会停止编译 */
		"removeComments": true /* 删除注释 */,
		// "noEmit": true,                                   /* 不生成编译文件，这个一般比较少用 */
		// "importHelpers": true,                            /* importHelpers的值为true或false，指定是否引入tslib里的辅助工具函数，默认为false */
		// "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types */
		// "downlevelIteration": true,                       /* 当target为'ES5' or 'ES3'时，为'for-of', spread, and destructuring'中的迭代器提供完全支持 */
		// "sourceRoot": "",                                 /* sourceRoot用于指定调试器应该找到TypeScript文件而不是源文件位置，这个值会被写进.map文件里. */
		// "mapRoot": "",                                    /* mapRoot用于指定调试器找到映射文件而非生成文件的位置，指定map文件的根路径，该选项会影响.map文件中的sources属性 */
		// "inlineSourceMap": true,                          /* 指定是否将map文件的内容和js文件编译在同一个js文件中，如果设为true，则map的内容会以//# sourceMappingURL=然后拼接base64字符串的形式插入在js文件底部 */
		// "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
		// "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
		// "newLine": "crlf",                                /* Set the newline character for emitting files. */
		// "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
		// "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
		// "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
		// "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
		/* Specify the output directory for generated declaration files. */
		// "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

		/* Interop Constraints */
		// "isolatedModules": true,                          /* isolatedModules的值为true或false，指定是否将每个文件作为单独的模块，默认为true，它不可以和declaration同时设定 */
		"allowSyntheticDefaultImports": true /* 用来指定允许从没有默认导出的模块中默认导入 */,
		"esModuleInterop": true /* 支持es6，commonjs模块，通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性*/,
		// "preserveSymlinks": true,                         /* 不把符号链接解析为其真实路径，具体可以了解下webpack和nodejs的symlink相关知识 */
		"forceConsistentCasingInFileNames": true /* 强制区分大小写*/,

		/* Type Checking */
		"strict": true /* 是否启动严格模式 */,
		"noImplicitAny": false /* noImplicitAny的值为true或false，如果我们没有为一些值设置明确的类型，编译器会默认认为这个值为any，如果noImplicitAny的值为true的话。则没有明确的类型会报错。默认值为false */,
		// "strictNullChecks": true,                         /* strictNullChecks为true时，null和undefined值不能赋给非这两种类型的值，别的类型也不能赋给他们，除了any类型。还有个例外就是undefined可以赋值给void类型 */
		// "strictFunctionTypes": true,                      /* strictFunctionTypes的值为true或false，用于指定是否使用函数参数双向协变检查 */
		// "strictBindCallApply": true,                      /* 设为true后会对bind、call和apply绑定的方法的参数的检测是严格检测的 */
		// "strictPropertyInitialization": true,             /* 设为true后会检查类的非undefined属性是否已经在构造函数里初始化，如果要开启这项，需要同时开启strictNullChecks，默认为false */
		// "noImplicitThis": true,                           /* 当this表达式的值为any类型的时候，生成一个错误 */
		// "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
		// "alwaysStrict": true,                             /* alwaysStrict的值为true或false，指定始终以严格模式检查每个模块，并且在编译之后的js文件中加入"use strict"字符串，用来告诉浏览器该js为严格模式 */
		// "noUnusedLocals": true,                           /* 用于检查是否有定义了但是没有使用的变量，对于这一点的检测，使用eslint可以在你书写代码的时候做提示，你可以配合使用。它的默认值为false */
		// "noUnusedParameters": true,                       /* 用于检查是否有在函数体中没有使用的参数，这个也可以配合eslint来做检查，默认为false */
		// "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
		// "noImplicitReturns": true,                        /* 用于检查函数是否有返回值，设为true后，如果函数没有返回值则会提示，默认为false */
		// "noFallthroughCasesInSwitch": true,               /* 用于检查switch中是否有case没有使用break跳出switch，默认为false */
		// "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
		// "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
		// "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
		// "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
		// "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

		/* Completeness */
		// "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
		"skipLibCheck": true
	},
	//"files": [], // files可以配置一个数组列表，里面包含指定文件的相对或绝对路径，编译器在编译的时候只会编译包含在files中列出的文件，如果不指定，则取决于有没有设置include选项，如果没有include选项，则默认会编译根目录以及所有子目录中的文件。这里列出的路径必须是指定文件，而不是某个文件夹，而且不能使用* ? **/ 等通配符

	"include": ["packages", "typings"], // 若无指定，默认会检索整个项目的ts文件进行操作,include也可以指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符，比如"./src"即表示要编译src文件夹下的所有文件以及子文件夹的文件
	// //"extends": "", // extends可以通过指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置，继承来的文件的配置会覆盖当前文件定义的配置。TS在3.2版本开始，支持继承一个来自Node.js包的tsconfig.json配置文件
	// "compileOnSave": true, // compileOnSave的值是true或false，如果设为true，在我们编辑了项目中的文件保存的时候，编辑器会根据tsconfig.json中的配置重新生成文件，不过这个要编辑器支持
	// "references": [], // 一个对象数组，指定要引用的项目
	"exclude": [
		/* exclude表示要排除的、不编译的文件，它也可以指定一个列表，规则和include一样，可以是文件或文件夹，可以是相对路径或绝对路径，可以使用通配符*/
		// 排除掉哪些类库
		"node_modules",
		"**/__tests__",
		"./dist/**/*"
		// "./dist/**/*"
	]
}
